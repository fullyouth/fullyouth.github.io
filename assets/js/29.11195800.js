(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{401:function(a,t,s){"use strict";s.r(t);var r=s(5),_=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"javascript-知识大纲"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#javascript-知识大纲"}},[a._v("#")]),a._v(" JavaScript 知识大纲")]),a._v(" "),t("h2",{attrs:{id:"一、数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、数据类型"}},[a._v("#")]),a._v(" 一、数据类型")]),a._v(" "),t("h3",{attrs:{id:"_1-1-javascript-有哪些数据类型-它们的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-javascript-有哪些数据类型-它们的区别"}},[a._v("#")]),a._v(" 1.1 JavaScript 有哪些数据类型，它们的区别？")]),a._v(" "),t("h3",{attrs:{id:"_1-2-数据类型检测的方式有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-数据类型检测的方式有哪些"}},[a._v("#")]),a._v(" 1.2 数据类型检测的方式有哪些？")]),a._v(" "),t("h3",{attrs:{id:"_1-3-判断数组的方式有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-判断数组的方式有哪些"}},[a._v("#")]),a._v(" 1.3 判断数组的方式有哪些？")]),a._v(" "),t("h3",{attrs:{id:"_1-4-null-和-undefined-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-null-和-undefined-区别"}},[a._v("#")]),a._v(" 1.4 null 和 undefined 区别？")]),a._v(" "),t("h3",{attrs:{id:"_1-5-instanceof-操作符的实现原理及实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-instanceof-操作符的实现原理及实现"}},[a._v("#")]),a._v(" 1.5 instanceof 操作符的实现原理及实现？")]),a._v(" "),t("h3",{attrs:{id:"_1-6-为什么-0-1-0-2-0-3-如何让其相等"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-6-为什么-0-1-0-2-0-3-如何让其相等"}},[a._v("#")]),a._v(" 1.6 为什么 0.1 + 0.2!== 0.3，如何让其相等？")]),a._v(" "),t("h3",{attrs:{id:"_1-7-操作符的强制类型转换规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-7-操作符的强制类型转换规则"}},[a._v("#")]),a._v(" 1.7 == 操作符的强制类型转换规则？")]),a._v(" "),t("h3",{attrs:{id:"_1-8-object-is-与比较操作符-、-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-8-object-is-与比较操作符-、-的区别"}},[a._v("#")]),a._v(" 1.8 Object.is () 与比较操作符 “===”、“==” 的区别？")]),a._v(" "),t("h3",{attrs:{id:"_1-9-object-assign-和扩展运算法是深拷贝还是浅拷贝-两者区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-9-object-assign-和扩展运算法是深拷贝还是浅拷贝-两者区别"}},[a._v("#")]),a._v(" 1.9 object.assign 和扩展运算法是深拷贝还是浅拷贝，两者区别？")]),a._v(" "),t("h3",{attrs:{id:"_1-10-typeof-null-的结果是什么-为什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-10-typeof-null-的结果是什么-为什么"}},[a._v("#")]),a._v(" 1.10 typeof null 的结果是什么，为什么？")]),a._v(" "),t("h3",{attrs:{id:"_1-11-isnan-和-number-isnan-函数的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-11-isnan-和-number-isnan-函数的区别"}},[a._v("#")]),a._v(" 1.11 isNaN 和 Number.isNaN 函数的区别？")]),a._v(" "),t("h3",{attrs:{id:"_1-12-其他值到字符串的转换规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-12-其他值到字符串的转换规则"}},[a._v("#")]),a._v(" 1.12 其他值到字符串的转换规则？")]),a._v(" "),t("h3",{attrs:{id:"_1-13-其他值到数字值的转换规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-13-其他值到数字值的转换规则"}},[a._v("#")]),a._v(" 1.13 其他值到数字值的转换规则？")]),a._v(" "),t("h3",{attrs:{id:"_1-14-其他值到布尔类型的值的转换规则"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-14-其他值到布尔类型的值的转换规则"}},[a._v("#")]),a._v(" 1.14 其他值到布尔类型的值的转换规则？")]),a._v(" "),t("h3",{attrs:{id:"_1-15-javascript-中如何进行隐式类型转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-15-javascript-中如何进行隐式类型转换"}},[a._v("#")]),a._v(" 1.15 JavaScript 中如何进行隐式类型转换？")]),a._v(" "),t("h3",{attrs:{id:"_1-16-如何获取安全的-undefined-值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-16-如何获取安全的-undefined-值"}},[a._v("#")]),a._v(" 1.16 如何获取安全的 undefined 值？")]),a._v(" "),t("h3",{attrs:{id:"_1-17-typeof-nan-的结果是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-17-typeof-nan-的结果是什么"}},[a._v("#")]),a._v(" 1.17 typeof NaN 的结果是什么？")]),a._v(" "),t("h3",{attrs:{id:"_1-18-和-操作符的返回值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-18-和-操作符的返回值"}},[a._v("#")]),a._v(" 1.18 || 和 && 操作符的返回值？")]),a._v(" "),t("h3",{attrs:{id:"_1-19-操作符什么时候用于字符串的拼接"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-19-操作符什么时候用于字符串的拼接"}},[a._v("#")]),a._v(" 1.19 + 操作符什么时候用于字符串的拼接？")]),a._v(" "),t("h3",{attrs:{id:"_1-20-什么是-javascript-中的包装类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-20-什么是-javascript-中的包装类型"}},[a._v("#")]),a._v(" 1.20 什么是 JavaScript 中的包装类型？")]),a._v(" "),t("h3",{attrs:{id:"_1-21-为什么会有-bigint-的提案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-21-为什么会有-bigint-的提案"}},[a._v("#")]),a._v(" 1.21 为什么会有 BigInt 的提案？")]),a._v(" "),t("h2",{attrs:{id:"二、es6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、es6"}},[a._v("#")]),a._v(" 二、ES6")]),a._v(" "),t("h3",{attrs:{id:"_2-1-let、const、var-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-let、const、var-的区别"}},[a._v("#")]),a._v(" 2.1 let、const、var 的区别？")]),a._v(" "),t("h3",{attrs:{id:"_2-2-箭头函数与普通函数的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-箭头函数与普通函数的区别"}},[a._v("#")]),a._v(" 2.2 箭头函数与普通函数的区别？")]),a._v(" "),t("h3",{attrs:{id:"_2-3-const-对象的属性可以修改吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-const-对象的属性可以修改吗"}},[a._v("#")]),a._v(" 2.3 const 对象的属性可以修改吗？")]),a._v(" "),t("h3",{attrs:{id:"_2-4-如果-new-一个箭头函数会怎么样"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-如果-new-一个箭头函数会怎么样"}},[a._v("#")]),a._v(" 2.4 如果 new 一个箭头函数会怎么样？")]),a._v(" "),t("h3",{attrs:{id:"_2-5-箭头函数的-this-指向哪里"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-箭头函数的-this-指向哪里"}},[a._v("#")]),a._v(" 2.5 箭头函数的 this 指向哪里？")]),a._v(" "),t("h3",{attrs:{id:"_2-6-对-rest-参数的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-对-rest-参数的理解"}},[a._v("#")]),a._v(" 2.6 对 rest 参数的理解？")]),a._v(" "),t("h3",{attrs:{id:"_2-7-es6-中模板语法与字符串处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-7-es6-中模板语法与字符串处理"}},[a._v("#")]),a._v(" 2.7 ES6 中模板语法与字符串处理？")]),a._v(" "),t("h3",{attrs:{id:"_2-8-扩展运算符的作用及使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-8-扩展运算符的作用及使用场景"}},[a._v("#")]),a._v(" 2.8 扩展运算符的作用及使用场景？")]),a._v(" "),t("h3",{attrs:{id:"_2-9-proxy-可以实现什么功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-9-proxy-可以实现什么功能"}},[a._v("#")]),a._v(" 2.9 Proxy 可以实现什么功能？")]),a._v(" "),t("h3",{attrs:{id:"_2-10-对对象与数组的解构的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-10-对对象与数组的解构的理解"}},[a._v("#")]),a._v(" 2.10 对对象与数组的解构的理解？")]),a._v(" "),t("h3",{attrs:{id:"_2-11-如何提取高度嵌套的对象里的指定属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-11-如何提取高度嵌套的对象里的指定属性"}},[a._v("#")]),a._v(" 2.11 如何提取高度嵌套的对象里的指定属性？")]),a._v(" "),t("h2",{attrs:{id:"三、javascript-基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、javascript-基础"}},[a._v("#")]),a._v(" 三、JavaScript 基础")]),a._v(" "),t("h3",{attrs:{id:"_3-1-new-操作符的实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-new-操作符的实现原理"}},[a._v("#")]),a._v(" 3.1 new 操作符的实现原理？")]),a._v(" "),t("h3",{attrs:{id:"_3-2-数组有哪些原生方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-数组有哪些原生方法"}},[a._v("#")]),a._v(" 3.2 数组有哪些原生方法？")]),a._v(" "),t("h3",{attrs:{id:"_3-3-什么是-dom-和-bom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-什么是-dom-和-bom"}},[a._v("#")]),a._v(" 3.3 什么是 DOM 和 BOM？")]),a._v(" "),t("h3",{attrs:{id:"_3-4-对类数组对象的理解-如何转化为数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-对类数组对象的理解-如何转化为数组"}},[a._v("#")]),a._v(" 3.4 对类数组对象的理解，如何转化为数组？")]),a._v(" "),t("h3",{attrs:{id:"_3-5-对-ajax-的理解-实现一个-ajax-请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-对-ajax-的理解-实现一个-ajax-请求"}},[a._v("#")]),a._v(" 3.5 对 AJAX 的理解，实现一个 AJAX 请求？")]),a._v(" "),t("h3",{attrs:{id:"_3-6-javascript-为什么要进行变量提升-它导致了什么问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-javascript-为什么要进行变量提升-它导致了什么问题"}},[a._v("#")]),a._v(" 3.6 JavaScript 为什么要进行变量提升，它导致了什么问题？")]),a._v(" "),t("h3",{attrs:{id:"_3-7-foreach-和-map-方法有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-foreach-和-map-方法有什么区别"}},[a._v("#")]),a._v(" 3.7 forEach 和 map 方法有什么区别？")]),a._v(" "),t("h3",{attrs:{id:"_3-8-map-和-object-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-map-和-object-的区别"}},[a._v("#")]),a._v(" 3.8 map 和 Object 的区别？")]),a._v(" "),t("h3",{attrs:{id:"_3-9-javascript-脚本延迟加载的方式有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-javascript-脚本延迟加载的方式有哪些"}},[a._v("#")]),a._v(" 3.9 JavaScript 脚本延迟加载的方式有哪些？")]),a._v(" "),t("h3",{attrs:{id:"_3-10-javascript-类数组对象的定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-javascript-类数组对象的定义"}},[a._v("#")]),a._v(" 3.10 JavaScript 类数组对象的定义？")]),a._v(" "),t("h3",{attrs:{id:"_3-11-为什么函数的-arguments-参数是类数组而不是数组-如何遍历类数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-11-为什么函数的-arguments-参数是类数组而不是数组-如何遍历类数组"}},[a._v("#")]),a._v(" 3.11 为什么函数的 arguments 参数是类数组而不是数组？如何遍历类数组？")]),a._v(" "),t("h3",{attrs:{id:"_3-12-es6-模块与-commonjs-模块有什么异同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-12-es6-模块与-commonjs-模块有什么异同"}},[a._v("#")]),a._v(" 3.12 ES6 模块与 CommonJS 模块有什么异同？")]),a._v(" "),t("h3",{attrs:{id:"_3-13-如何判断一个对象是否属于某个类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-13-如何判断一个对象是否属于某个类"}},[a._v("#")]),a._v(" 3.13 如何判断一个对象是否属于某个类？")]),a._v(" "),t("h3",{attrs:{id:"_3-14-for-in-和-for-of-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-14-for-in-和-for-of-的区别"}},[a._v("#")]),a._v(" 3.14 for...in 和 for...of 的区别？")]),a._v(" "),t("h3",{attrs:{id:"_3-15-数组的遍历方法有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-15-数组的遍历方法有哪些"}},[a._v("#")]),a._v(" 3.15 数组的遍历方法有哪些？")]),a._v(" "),t("h3",{attrs:{id:"_3-16-map-和-weakmap-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-16-map-和-weakmap-的区别"}},[a._v("#")]),a._v(" 3.16 map 和 weakMap 的区别？")]),a._v(" "),t("h3",{attrs:{id:"_3-17-常用的正则表达式有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-17-常用的正则表达式有哪些"}},[a._v("#")]),a._v(" 3.17 常用的正则表达式有哪些？")]),a._v(" "),t("h3",{attrs:{id:"_3-18-对-json-的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-18-对-json-的理解"}},[a._v("#")]),a._v(" 3.18 对 JSON 的理解？")]),a._v(" "),t("h3",{attrs:{id:"_3-19-unicode、utf-8、utf-16、utf-32-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-19-unicode、utf-8、utf-16、utf-32-的区别"}},[a._v("#")]),a._v(" 3.19 Unicode、UTF-8、UTF-16、UTF-32 的区别？")]),a._v(" "),t("h3",{attrs:{id:"_3-20-常见的位运算符有哪些-其计算规则是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-20-常见的位运算符有哪些-其计算规则是什么"}},[a._v("#")]),a._v(" 3.20 常见的位运算符有哪些？其计算规则是什么？")]),a._v(" "),t("h3",{attrs:{id:"_3-21-escape、encodeuri、encodeuricomponent-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-21-escape、encodeuri、encodeuricomponent-的区别"}},[a._v("#")]),a._v(" 3.21 escape、encodeURI、encodeURIComponent 的区别？")]),a._v(" "),t("h3",{attrs:{id:"_3-22-什么是尾调用-使用尾调用有什么好处"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-22-什么是尾调用-使用尾调用有什么好处"}},[a._v("#")]),a._v(" 3.22 什么是尾调用，使用尾调用有什么好处？")]),a._v(" "),t("h3",{attrs:{id:"_3-23-常见的-dom-操作有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-23-常见的-dom-操作有哪些"}},[a._v("#")]),a._v(" 3.23 常见的 DOM 操作有哪些？")]),a._v(" "),t("h3",{attrs:{id:"_3-24-use-strict-是什么意思-使用它区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-24-use-strict-是什么意思-使用它区别是什么"}},[a._v("#")]),a._v(" 3.24 use strict 是什么意思？使用它区别是什么？")]),a._v(" "),t("h3",{attrs:{id:"_3-25-如何使用-for-of-遍历对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-25-如何使用-for-of-遍历对象"}},[a._v("#")]),a._v(" 3.25 如何使用 for...of 遍历对象？")]),a._v(" "),t("h3",{attrs:{id:"_3-26-ajax、axios、fetch-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-26-ajax、axios、fetch-的区别"}},[a._v("#")]),a._v(" 3.26 ajax、axios、fetch 的区别？")]),a._v(" "),t("h3",{attrs:{id:"_3-27-javascript-有哪些内置对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-27-javascript-有哪些内置对象"}},[a._v("#")]),a._v(" 3.27 JavaScript 有哪些内置对象？")]),a._v(" "),t("h3",{attrs:{id:"_3-28-强类型语言和弱类型语言的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-28-强类型语言和弱类型语言的区别"}},[a._v("#")]),a._v(" 3.28 强类型语言和弱类型语言的区别？")]),a._v(" "),t("h3",{attrs:{id:"_3-29-解释性语言和编译型语言的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-29-解释性语言和编译型语言的区别"}},[a._v("#")]),a._v(" 3.29 解释性语言和编译型语言的区别？")]),a._v(" "),t("h2",{attrs:{id:"四、原型与原型链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、原型与原型链"}},[a._v("#")]),a._v(" 四、原型与原型链")]),a._v(" "),t("h3",{attrs:{id:"_4-1-对原型、原型链的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-对原型、原型链的理解"}},[a._v("#")]),a._v(" 4.1 对原型、原型链的理解？")]),a._v(" "),t("h3",{attrs:{id:"_4-2-原型链指向"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-原型链指向"}},[a._v("#")]),a._v(" 4.2 原型链指向？")]),a._v(" "),t("h3",{attrs:{id:"_4-3-原型修改、重写"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-原型修改、重写"}},[a._v("#")]),a._v(" 4.3 原型修改、重写？")]),a._v(" "),t("h3",{attrs:{id:"_4-4-原型链的终点是什么-如何打印出原型链的终点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-原型链的终点是什么-如何打印出原型链的终点"}},[a._v("#")]),a._v(" 4.4 原型链的终点是什么？如何打印出原型链的终点？")]),a._v(" "),t("h3",{attrs:{id:"_4-5-如何获得对象非原型链上的属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-如何获得对象非原型链上的属性"}},[a._v("#")]),a._v(" 4.5 如何获得对象非原型链上的属性？")]),a._v(" "),t("h2",{attrs:{id:"五、执行上下文-作用域链-闭包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、执行上下文-作用域链-闭包"}},[a._v("#")]),a._v(" 五、执行上下文 / 作用域链 / 闭包")]),a._v(" "),t("h3",{attrs:{id:"_5-1-对闭包的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-对闭包的理解"}},[a._v("#")]),a._v(" 5.1 对闭包的理解？")]),a._v(" "),t("h3",{attrs:{id:"_5-2-对作用域、作用域链的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-对作用域、作用域链的理解"}},[a._v("#")]),a._v(" 5.2 对作用域、作用域链的理解？")]),a._v(" "),t("h3",{attrs:{id:"_5-3-对执行上下文的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-对执行上下文的理解"}},[a._v("#")]),a._v(" 5.3 对执行上下文的理解？")]),a._v(" "),t("h2",{attrs:{id:"六、this-call-apply-bind"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、this-call-apply-bind"}},[a._v("#")]),a._v(" 六、this/call/apply/bind")]),a._v(" "),t("h3",{attrs:{id:"_6-1-对-this-对象的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-对-this-对象的理解"}},[a._v("#")]),a._v(" 6.1 对 this 对象的理解？")]),a._v(" "),t("h3",{attrs:{id:"_6-2-call-和-apply-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-call-和-apply-的区别"}},[a._v("#")]),a._v(" 6.2 call () 和 apply () 的区别？")]),a._v(" "),t("h3",{attrs:{id:"_6-3-实现-call、apply-及-bind-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-实现-call、apply-及-bind-函数"}},[a._v("#")]),a._v(" 6.3 实现 call、apply 及 bind 函数？")]),a._v(" "),t("h2",{attrs:{id:"七、异步编程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七、异步编程"}},[a._v("#")]),a._v(" 七、异步编程")]),a._v(" "),t("h3",{attrs:{id:"_7-1-对-promise-的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-对-promise-的理解"}},[a._v("#")]),a._v(" 7.1 对 Promise 的理解？")]),a._v(" "),t("h3",{attrs:{id:"_7-2-promise-的基本用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-promise-的基本用法"}},[a._v("#")]),a._v(" 7.2 Promise 的基本用法？")]),a._v(" "),t("h3",{attrs:{id:"_7-3-对-async-await-的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-对-async-await-的理解"}},[a._v("#")]),a._v(" 7.3 对 async/await 的理解？")]),a._v(" "),t("h3",{attrs:{id:"_7-4-async-await-对比-promise-的优势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-4-async-await-对比-promise-的优势"}},[a._v("#")]),a._v(" 7.4 async/await 对比 Promise 的优势？")]),a._v(" "),t("h3",{attrs:{id:"_7-5-异步编程的实现方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-5-异步编程的实现方式"}},[a._v("#")]),a._v(" 7.5 异步编程的实现方式？")]),a._v(" "),t("h3",{attrs:{id:"_7-6-settimeout、promise、async-await-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-6-settimeout、promise、async-await-的区别"}},[a._v("#")]),a._v(" 7.6 setTimeout、Promise、Async/Await 的区别？")]),a._v(" "),t("h3",{attrs:{id:"_7-7-promise-解决了什么问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-7-promise-解决了什么问题"}},[a._v("#")]),a._v(" 7.7 Promise 解决了什么问题？")]),a._v(" "),t("h3",{attrs:{id:"_7-8-promise-all-和-promise-race-的区别及使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-8-promise-all-和-promise-race-的区别及使用场景"}},[a._v("#")]),a._v(" 7.8 Promise.all 和 Promise.race 的区别及使用场景？")]),a._v(" "),t("h3",{attrs:{id:"_7-9-await-到底在等啥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-9-await-到底在等啥"}},[a._v("#")]),a._v(" 7.9 await 到底在等啥？")]),a._v(" "),t("h3",{attrs:{id:"_7-10-async-await-的优势"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-10-async-await-的优势"}},[a._v("#")]),a._v(" 7.10 async/await 的优势？")]),a._v(" "),t("h3",{attrs:{id:"_7-11-async-await-如何捕获异常"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-11-async-await-如何捕获异常"}},[a._v("#")]),a._v(" 7.11 async/await 如何捕获异常？")]),a._v(" "),t("h3",{attrs:{id:"_7-12-并发与并行的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-12-并发与并行的区别"}},[a._v("#")]),a._v(" 7.12 并发与并行的区别？")]),a._v(" "),t("h3",{attrs:{id:"_7-13-什么是回调函数-回调函数有什么缺点-如何解决回调地狱问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-13-什么是回调函数-回调函数有什么缺点-如何解决回调地狱问题"}},[a._v("#")]),a._v(" 7.13 什么是回调函数？回调函数有什么缺点？如何解决回调地狱问题？")]),a._v(" "),t("h3",{attrs:{id:"_7-14-settimeout、setinterval、requestanimationframe-各有什么特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-14-settimeout、setinterval、requestanimationframe-各有什么特点"}},[a._v("#")]),a._v(" 7.14 setTimeout、setInterval、requestAnimationFrame 各有什么特点？")]),a._v(" "),t("h2",{attrs:{id:"八、面向对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#八、面向对象"}},[a._v("#")]),a._v(" 八、面向对象")]),a._v(" "),t("h3",{attrs:{id:"_8-1-对象创建的方式有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-对象创建的方式有哪些"}},[a._v("#")]),a._v(" 8.1 对象创建的方式有哪些？")]),a._v(" "),t("h3",{attrs:{id:"_8-2-对象继承的方式有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-2-对象继承的方式有哪些"}},[a._v("#")]),a._v(" 8.2 对象继承的方式有哪些？")]),a._v(" "),t("h2",{attrs:{id:"九、垃圾回收与内存泄漏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#九、垃圾回收与内存泄漏"}},[a._v("#")]),a._v(" 九、垃圾回收与内存泄漏")]),a._v(" "),t("h3",{attrs:{id:"_9-1-浏览器的垃圾回收机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-1-浏览器的垃圾回收机制"}},[a._v("#")]),a._v(" 9.1 浏览器的垃圾回收机制？")]),a._v(" "),t("h3",{attrs:{id:"_9-2-哪些情况会导致内存泄漏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-2-哪些情况会导致内存泄漏"}},[a._v("#")]),a._v(" 9.2 哪些情况会导致内存泄漏？")])])}),[],!1,null,null,null);t.default=_.exports}}]);